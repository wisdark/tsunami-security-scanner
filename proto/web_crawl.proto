/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Data models for the web crawler.
syntax = "proto3";

package tsunami.proto;

import "network_service.proto";

option java_multiple_files = true;
option java_outer_classname = "WebCrawlProtos";
option java_package = "com.google.tsunami.proto";
option go_package = "github.com/google/tsunami-security-scanner/proto";

message CrawlConfig {
  // The crawler should only interact with web resources under certain scopes.
  message Scope {
    // The domain of the scope, only URLs that are on the same domain or a
    // subdomain will be admitted for crawling. Domain might include a port.
    // Required.
    string domain = 1;

    // The path of the scope, only URLs that are under the same path will be
    // admitted for crawling.
    // Optional. When empty, all URLs under the same domain are allowed,
    // regardless of the paths.
    string path = 2;
  }

  // Starting points of a web crawl.
  // Required.
  repeated string seeding_urls = 1;

  // The maximum depth of a web crawl.
  // Required.
  int32 max_depth = 2;

  // Allowed crawling scopes.
  // Optional. When empty, scopes are autogenerated from seeding_urls.
  repeated Scope scopes = 3;

  // The network service to be crawled.
  // Required.
  NetworkService network_service = 4;
}

message CrawlTarget {
  // The URL pointing to the document.
  string url = 1;

  // HTTP method to reach the url. Value must be in all upper case, like "GET".
  string http_method = 2;

  // An optional HTTP request body sent to the crawl URL.
  bytes http_request_body = 3;
}

message CrawlResult {
  // The target visited by the crawler.
  CrawlTarget crawl_target = 1;

  // Depth at which the target was visited.
  int32 crawl_depth = 2;

  // Response code from the crawled target.
  int32 response_code = 3;

  // Content type of the resource served at the crawl target.
  string content_type = 4;

  // The content of the resource served at the crawl target.
  bytes content = 5;
}
